use ::BBjNotificationManager/NotificationManager.bbj::NotificationManager
use java.util.ArrayList 
use ::BBjNotificationManager/src/NotificationButton.bbj::NotificationButton
use ::BBjNotificationManager/src/NotificationEvent.bbj::NotificationEvent


declare NotificationManager mng!
mng! = new NotificationManager()
mng!.setCallback(17,"onclick")
declare BBjSysGui SysGui!

if info(3,6) = "5" then
  SysGui! = BBjAPI().openSysGui("X0")
  declare auto BBjMDI MDI!
  MDI! = BBjAPI().getMDI()
  MDI!.createMDIWindow(0,0,800,600,"Demo Notifications",$000010008$)
else
  SysGui! = BBjAPI().openSysGui("X0")
endif

Rem getting all controlls
handle = SysGui!.resOpen("BBjNotificationManager/Demo/demo.arc")

declare auto BBjTopLevelWindow wnd!
wnd! = SysGui!.createTopLevelWindow(handle,999)

declare auto BBjButton btn!
btn! = wnd!.getControl(1100)

declare auto BBjCEdit text!
text! = wnd!.getControl(102)

declare auto BBjInputN time!
time! = wnd!.getControl(103)

declare auto BBjInputE title!
title! = wnd!.getControl(104)

declare auto BBjCheckBox animate!
animate! = wnd!.getControl(101)

declare auto BBjInputE eventhandle!
eventhandle! = wnd!.getControl(109)

declare auto BBjStaticText eventmessage!
eventmessage! = wnd!.getControl(110)

declare auto BBjInputE path!
path! = wnd!.getControl(112)

declare auto BBjInputE color!
color! = wnd!.getControl(114) 

declare auto BBjInputE link!
link! = wnd!.getControl(116) 

declare auto BBjCheckBox isOriTopRight!
isOriTopRight! = wnd!.getControl("cbTopRight")

declare Boolean anim!
anim! = 0
btn!.setCallback(BBjAPI.ON_BUTTON_PUSH,"btnPush")
animate!.setCallback(BBjAPI.ON_CHECK_ON,"animate")
animate!.setCallback(BBjAPI.ON_CHECK_OFF,"animateoff")
isOriTopRight!.setCallback(BBjAPI.ON_CHECK_ON,"orientationTopRight")
wnd!.setCallback(BBjAPI.ON_CLOSE,"byebye")

process_events

btnPush:
rem adding a notification
rem parameters are : text,timeout,title ,eventhandle,color ,image ,buttons,link
declare ArrayList buttons!
buttons! = new ArrayList()
button! = new NotificationButton("accept","accept")
buttons!.add(button!)
button! = new NotificationButton("decline","decline")
buttons!.add(button!)
button! = new NotificationButton("ignore","ignore")
buttons!.add(button!)
mng!.addNotification(text!.getText(),num(time!.getText()),title!.getText(),eventhandle!.getText(),SysGui!.makeColor(color!.getText().toUpperCase()),bbjapi().getSysGui().getImageManager().loadImageFromFile(path!.getText()),buttons!,link!.getText()) 

return

animate: 
  rem changing animation settings
  mng!.setAnimate(1)
  anim! = 1
return

animateoff:
  mng!.setAnimate(0)
  anim! = 0
return

orientationTopRight: 
  mng!.setInitialOrientationTopRight()
  isOriTopRight!.setEnabled(0)
return

byebye:
  bye


onclick:
REM extract the Event that has been pushed
ev!= BBjAPI().getLastEvent()

REM extract the Object out of the Event 
declare auto NotificationEvent ob! 
ob! = ev!.getObject()

REM Use the Object out of the Event
eventmessage!.setText("Event "+ ob!.getevent() +" of the Type "+ ob!.geteventtype() +" caught on Notification " + ob!.getnotification())
print eventmessage!.getText()


rem using the event pushed by the Notification class to delete pushed handle
rem you will need the handle associated with the window to delete given window!(its the handle associated with a click onto the window, in this demo showcased by the field eventhandle!)
if ob!.geteventtype() = "WINDOW_PUSH" then
    mng!.deleteNotification(str(ob!.getnotification()))
fi
return